#! /usr/bin/perl

use strict;
use warnings;

use List::Util qw(shuffle);
use YAML::XS qw(LoadFile DumpFile);
use Getopt::Std;

my %o;
getopts('b',\%o);

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
my $y=LoadFile($yf) or die "no $yf";
my $ti=LoadFile('../tiles.yaml') or die "no tiles";

my %w;
{
  my $l=0;
  my @course=split '',$y->{course};
  while (my $f=shift @course) {
    if (!exists $ti->{$f}) {
      $f.=shift @course;
      if (!exists $ti->{$f}) {
        die "no tile $f\n";
      }
    }
    if (exists $y->{weather}{$f}) {
      map {$w{sprintf('%02d',$_)}=$y->{weather}{$f}} ($l..$l+$ti->{$f}{length}-1);
    }
    $l+=$ti->{$f}{length};
  }
}

my $a=1;
foreach my $player (keys %{$y->{players}}) {
  foreach my $rider (@{$y->{players}{$player}{riders}}) {
    unless (exists $rider->{location}) {
      next;
    }
    unless (exists $rider->{hand}) {
      $rider->{hand}=[];
    }
    if ($o{b} && (!exists $rider->{play} || scalar @{$rider->{play}}==0)) {
      next;
    }
    my $cards=4;
    (my $d=$rider->{location}) =~ s/[a-z]$//;
    if (exists $w{$d}) {
      if ($w{$d} eq 'headwind') {
        $cards=3;
      } elsif ($w{$d} eq 'tailwind') {
        $cards=5;
      }
    }
    foreach my $cn (1..$cards) {
      # recycle discards if needed
      unless (scalar @{$rider->{deck}}) {
        if (exists $rider->{discard}) {
          @{$rider->{deck}}=@{$rider->{discard}};
          delete $rider->{discard};
        }
      }
      if (scalar @{$rider->{deck}}) {
        my @t=shuffle @{$rider->{deck}};
        push @{$rider->{hand}},pop @t;
        @{$rider->{deck}}=sort @t;
      } else {
        if ($cn==1) {
          unless (scalar @{$rider->{hand}}) {
            push @{$rider->{hand}},'X';
          }
        }
        last;
      }
    }
    my %c=map {$_ => 1} @{$rider->{hand}};
    delete $c{2};
    delete $c{X};
    if (keys %c) {
      $a=0;
    }
  }
}

DumpFile(newname($yf),$y);

if ($a) {
  warn "All remaining riders are automatic\n";
}

sub readtime {
  my $t=shift;
  if ($t =~ /^[0-9]+$/) {
    return $t;
  }
  $t =~ /(\d+):(\d+)/;
  return $1*60+$2;
}

sub newname {
  my $oldname=shift;
  my $offset=shift || 0;
  my @p=reverse split /\./,$oldname;
  my $t;
  foreach my $i (0..$#p) {
    if ($p[$i] =~ /^[0-9]+$/) {
      if ($offset) {
        $offset--;
      } else {
        $t=$i;
        last;
      }
    }
  }
  if (defined $t) {
    $p[$t]=sprintf('%0'.length($p[$t]).'d',$p[$t]+1);
  } else {
    splice @p,1,0,'new';
  }
  return join('.',reverse @p);
}

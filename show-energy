#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw(LoadFile);

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
my $y=LoadFile($yf) or die "no $yf";

my @l;
my @out;
foreach my $player (sort keys %{$y->{players}}) {
  my @o;
  my $auto=1;
  foreach my $rider (@{$y->{players}{$player}{riders}}) {
    unless (exists $rider->{location}) {
      next;
    }
    if (!exists $rider->{hand} || scalar @{$rider->{hand}}==0) {
      next;
    }
    my %cards;
    foreach my $mode (qw(hand deck play discard)) {
      $cards{$mode}=$rider->{$mode} || [];
    }
    push @{$cards{deck}},@{$cards{hand}};
    #     @{$cards{$mode}}=sort @{$cards{$mode}};
    push @o,"$rider->{type}:";
    if (exists $rider->{down}) {
      push @o,"Rider is down: -2 movement."
    }
    foreach my $mode (qw(deck discard play hand)) {
      if (@{$cards{$mode}}) {
        push @o,ucfirst($mode).': '.join(', ',sort  @{$cards{$mode}});
        if ($mode eq 'hand') {
          my %c=map {$_ => 1} @{$cards{$mode}};
          delete $c{2};
          delete $c{X};
          if (keys %c) {        # we have something other than 2/X
            $auto=0;
          } else {
            $o[-1] .= ' (played automatically)';
          }
        }
        if (exists $y->{style} && $y->{style} eq 'bgg') {
          $o[-1] .= padding();
        }
      }
    }
    if (exists $y->{style} && $y->{style} eq 'bgg') {
      splice @o,-1,0,"This turn's hand\n[o]";
      push @o,'[/o]';
    } else {
      splice @o,-1,0,"[details=This turn's hand]";
      push @o,'[/details]';
    }
  }
  if (@o) {
    if ($auto) {
      next;
      # @o=('All riders are being played automatically');
    }
    if (exists $y->{style} && $y->{style} eq 'bgg') {
      unshift @o,"For $player ($y->{players}{$player}{colourname}) only\n[o]";
      push @o,"[/o]";
    } else {
      unshift @o,"[details=For $player ($y->{players}{$player}{colourname}) only]";
      push @o,"[/details]";
    }
    push @out,@o;
    push @l,$player;
  }
}

print map {"$_\n"} @out;
unless (exists $y->{style} && $y->{style} eq 'bgg') {
  print join(', ',map {'@'.$_} @l),"\n";
}

sub padding {
  return ' [color=#e8e9e9]'.('x' x int(rand()*30+10)).'[/color]';
}

#! /usr/bin/perl

use strict;
use warnings;

use List::Util qw(shuffle max sum);
use YAML::XS qw(LoadFile DumpFile);

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
my $y=LoadFile($yf) or die "no $yf";
my $ti=LoadFile('../tiles.yaml') or die "no tiles";

my @weather=shuffle(('fair') x 9,
                    'wet',
                    'crosswind',
                    'headwind',
                    'tailwind',
                      );

my %start;
my %uphill;
{
  my $s=0;
  my @course=split '',$y->{course};
  while (my $f=shift @course) {
    if (!exists $ti->{$f}) {
      $f.=shift @course;
      if (!exists $ti->{$f}) {
        die "no tile $f\n";
      }
    }
    my %fk;
    if (exists $ti->{$f}{features}) {
      my @lanes=($ti->{$f}{lanes} || 2) x $ti->{$f}{length};
      foreach my $fh (@{$ti->{$f}{features}}) {
        my $k=(keys %{$fh})[0];
        $fk{$k}=$fh->{$k};
        my @r;
        if ($fh->{$k} =~ /([0-9]+)-([0-9]+)/) {
          @r=($1,$2);
        } else {
          @r=($fh->{$k},$fh->{$k});
        }
        if ($k =~ /([0-9]+)lane/) {
          my $l=$1;
          foreach my $i ($r[0]..$r[1]) {
            $lanes[$i-1]=$l;
          }
        } elsif ($k eq 'start') {
          my $start=$r[1]-1;
          my @squares=('A'..'Z');
          my $stsq=sum(map {$lanes[$_]} (0..$start));
          splice @squares,$stsq;
          @squares=reverse @squares;
          foreach my $lr (0..$start) {
            my $lu=sprintf('%02d',$lr);
            foreach my $li (0..$lanes[$lr]-1) {
              $start{shift @squares}=$lu.[qw(z y x)]->[$lanes[$lr]-1-$li];
            }
          }
          $y->{startmap}=\%start;
        } elsif ($k eq 'uphill') {
          foreach my $i ($r[0]..$r[1]) {
            $uphill{$s+$i-1}=1;
          }
        }
      }
    }
    # check for and add weather
    if ($ti->{$f}{length} == 6 &&
          !exists $ti->{$f}{bend} &&
          !exists $fk{start} &&
          !exists $fk{finish}) {
      my $w=pop @weather;
      if ($w ne 'fair') {
        $y->{weather}{$f}=$w;
      }
    }
    $s+=$ti->{$f}{length};
  }
}

if (%uphill) {
  while (1) {
    my $dirty=0;
    foreach my $r (keys %uphill) {
      my $s=$r+$uphill{$r};
      if (exists $uphill{$s}) {
        $uphill{$r}+=$uphill{$s};
        delete $uphill{$s};
        $dirty=1;
        last;
      }
    }
    unless ($dirty) {
      last;
    }
  }

  { # mountain point stashes
    my %mountain;
    foreach my $r (keys %uphill) {
      my $crest=$uphill{$r}+$r;
      my @points=(6,4,3,2,1);
      if ($uphill{$r}<11) {
        shift @points;
        if ($uphill{$r}<9) {
          shift @points;
          if ($uphill{$r}<6) {
            shift @points;
            if ($uphill{$r}<3) {
              shift @points;
            }
          }
        }
      }
      $mountain{$crest}=\@points;
    }
    $y->{mountains}=\%mountain;
  }
}

my %teaminfo;
foreach my $player (keys %{$y->{players}}) {
  my $tp=0;
  my $maxtime=0;
  foreach my $rider (@{$y->{players}{$player}{riders}}) {
    my @deck;
    if ($rider->{type} eq 'rouleur') {
      @deck=(3..7);
    } elsif ($rider->{type} eq 'sprinteur') {
      @deck=(2..5,9);
    } elsif ($rider->{type} eq 'puncheur') {
      @deck=(2,3,5,6,8);
    } elsif ($rider->{type} eq 'grimpeur') {
      @deck=(2..4,6,7);
    } else {
      die "Bad rider $rider->{type} for $player\n";
    }
    $rider->{deck}=[sort ((@deck) x 3)];
    if (exists $rider->{exhaustion}) {
      push @{$rider->{deck}},('X') x $rider->{exhaustion};
      delete $rider->{exhaustion};
    }
    if (exists $rider->{score}) {
      if (exists $rider->{score}{place}) {
        $tp+=sum(@{$rider->{score}{place}});
      }
      if (exists $rider->{score}{time}) {
        my $tm=readtime($rider->{score}{time});
        $maxtime=max($maxtime,$tm);
      }
    }
  }
  $teaminfo{$player}{tp}=$tp;
  $teaminfo{$player}{time}=$maxtime;
  $teaminfo{$player}{random}=rand();
}

DumpFile(newname($yf),$y);

my @pl=sort {
  $teaminfo{$a}{tp} <=> $teaminfo{$b}{tp} ||
    $teaminfo{$b}{time} <=> $teaminfo{$b}{time} ||
    $teaminfo{$b}{random} <=> $teaminfo{$b}{random}
  } keys %{$y->{players}};

map {delete $y->{players}{$_}{random}} keys %{$y->{players}};

print "Setup order:\n";
foreach my $pi (0..$#pl) {
  my $pn=$pl[$pi];
  my $at=($pi==0)?'@':'';
  print "* $at$pn ($y->{players}{$pn}{colourname})\n";
}

sub readtime {
  my $t=shift;
  if ($t =~ /^[0-9]+$/) {
    return $t;
  }
  $t =~ /(\d+):(\d+)/;
  return $1*60+$2;
}

sub newname {
  my $oldname=shift;
  my $offset=shift || 0;
  my @p=reverse split /\./,$oldname;
  my $t;
  foreach my $i (0..$#p) {
    if ($p[$i] =~ /^[0-9]+$/) {
      if ($offset) {
        $offset--;
      } else {
        $t=$i;
        last;
      }
    }
  }
  if (defined $t) {
    $p[$t]=sprintf('%0'.length($p[$t]).'d',$p[$t]+1);
  } else {
    splice @p,1,0,'new';
  }
  return join('.',reverse @p);
}

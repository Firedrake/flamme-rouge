#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw(LoadFile DumpFile);
use List::Util qw(min max);
use Storable qw(dclone);

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
my $y=LoadFile($yf) or die "no $yf";

my $ti=LoadFile('../tiles.yaml') or die "no tiles";

my @laneindex=reverse ('a'..'z');
my %laneindex=map {$laneindex[$_] => $_} (0..$#laneindex);

my @cinfo;
{
  my ($cx,$cy,$cdir)=(0) x 3;
  my @course=split '',$y->{course};
  while (my $f=shift @course) {
    if (!exists $ti->{$f}) {
      $f.=shift @course;
      if (!exists $ti->{$f}) {
        die "no tile $f\n";
      }
    }
    push @cinfo,{tile => $f, x => $cx, y => $cy, dir => $cdir};
    if (exists $y->{weather}{$f}) {
      $cinfo[-1]{weather}=$y->{weather}{$f};
    }
  }
}

my @features;
my $subspace=0;
my $space=0;
my %sqexist;
my @sqlanes;
my $finishline=999;
foreach my $tx (0..$#cinfo) {
  my $t=$cinfo[$tx];
  my $tinfo=$ti->{$t->{tile}};
  my @lanes=($tinfo->{lanes} || 2) x $tinfo->{length};
  my $start=0;
  if (exists $tinfo->{features}) {
    foreach my $f (@{$tinfo->{features}}) {
      my $k=(keys %{$f})[0];
      my @r;
      if ($f->{$k} =~ /([0-9]+)-([0-9]+)/) {
        @r=($1,$2);
      } else {
        @r=($f->{$k},$f->{$k});
      }
      if ($k =~ /^([0-9]+)lane/) {
        my $l=$1;
        foreach my $i ($r[0]..$r[1]) {
          $lanes[$i-1]=$l;
        }
      } else {
        foreach my $i ($r[0]..$r[1]) {
          $features[$space+$i-1]{$k}=1;
        }
        if ($k eq 'start') {
          $features[$space+$r[1]]{startline}=1;
          $start=$r[1]-1;
        } elsif ($k eq 'finish') {
          $features[$space+$r[0]-1]{finishline}=1;
          $finishline=$space+$r[0]-1;
        }
      }
    }
  }
  my @squares;
  foreach my $si (0..$tinfo->{length}-1) {
    my $sp=$space+$si;
    $sqlanes[$sp]=$lanes[$si];
    if (exists $cinfo[$tx]{weather}) {
      $features[$sp]{$cinfo[$tx]{weather}}=1;
    }
    my $lo=($lanes[$si]-1)/2;
    for (my $lane=$lanes[$si]-1;$lane>=0;$lane--) {
      $sqexist{sprintf('%02d%1s',$sp,$laneindex[$lane])}=$subspace++;
    }
  }
  $space+=$tinfo->{length};
}
my @sqq=sort keys %sqexist;

my %down;
my $f=0;
my %riderloc;
foreach my $p (keys %{$y->{players}}) {
  my $colour=$y->{players}{$p}{colour};
  foreach my $ri (0..$#{$y->{players}{$p}{riders}}) {
    my $rider=$y->{players}{$p}{riders}[$ri];
    unless (exists $rider->{score}) {
      $rider->{score}={};
    }
    if (exists $rider->{location}) {
      $rider->{oldlocation}=$rider->{location};
      unless (exists $rider->{play}) {
        my %c=map {$_ => 1} @{$rider->{hand}};
        delete $c{2};
        delete $c{X};
        unless (keys %c) {      # 2/X only
          @{$rider->{hand}}=sort @{$rider->{hand}};
          push @{$rider->{play}},pop @{$rider->{hand}};
          unless (exists $rider->{discard}) {
            $rider->{discard}=[];
          }
          push @{$rider->{discard}},@{$rider->{hand}};
          delete $rider->{hand};
        }
      }
      unless (exists $rider->{play}) {
        warn "$p ($y->{players}{$p}{colourname}) $rider->{type}} has not played\n";
        $f=1;
      }
      $riderloc{$rider->{location}}={player => $p,
                                     index => $ri};
    }
  }
}
if ($f) {
  die "Fix unplayed riders and rerun.\n";
}

my ($maxr,$maxl)=loc2rowlane($sqq[-1]);

my @s=reverse sort keys %riderloc;
foreach my $loc (@s) {
  my $pp=$y->{players}{$riderloc{$loc}{player}};
  my $pr=$pp->{riders}[$riderloc{$loc}{index}];
  my ($row,$col)=loc2rowlane($loc);
  my $distance=0;
  my @log;
  my $rc="$pp->{colourname} $pr->{type}";
  if ($pr->{play}[0] eq 'X') {
    $distance=2;
    push @log,"$rc plays X for 2";
  } else {
    $distance=$pr->{play}[0]+0;
    push @log,"$rc plays $distance";
  }
  if (exists $features[$row]{downhill} && $distance<5) {
    $distance=max(5,$distance);
    push @log,"upgrades to 5 for downhill";
  }
  if (exists $features[$row]{supply} && $distance<4) {
    $distance=max(4,$distance);
    push @log,"upgrades to 4 for supply";
  }
  if (exists $pr->{down}) {
    push @log,"drops by 2 for previous down";
    $distance=max($distance-2,0);
    delete $pr->{down};
  }
  my $mxup=($pr->{type} eq 'grimpeur')?7:5;
  if ($distance > $mxup) {
    my $limit=-1;
    foreach my $nrn (0..$distance) {
      if (exists $features[$nrn+$row]{uphill}) {
        $limit=$nrn;
        last;
      }
    }
    if ($limit>-1) {
      if ($limit > $mxup) {   # first uphill is after the uphill limit
        foreach my $nrn ($mxup+1..$distance) {
          if (exists $features[$nrn+$row]{uphill}) {
            $distance=$nrn-1;
            last;
          }
        }
      } else {               # first uphill is inside the uphill limit
        $distance=$mxup;
      }
      push @log,"capped to $distance/$mxup by uphill";
    }
  }
  my $brake=0;
  # check for downed riders from row+1 to row+distance about here, set brake and cut distance if distance would pass them
  {
    my %downs;
    foreach my $k (keys %riderloc) {
      unless ($k eq $loc) {
        my $dp=$y->{players}{$riderloc{$k}{player}};
        my $dr=$dp->{riders}[$riderloc{$k}{index}];
        if (exists $dr->{down}) {
          my ($a,$b)=loc2rowlane($k);
          $downs{$a+0}++;
        }
      }
    }
    foreach my $na (1..$distance) {
      my $sa=$na+$row;
      if (exists $downs{$sa} && $downs{$sa}>=$sqlanes[$sa]) {
        $distance=$na-1;
        $brake=1;
        push @log,"capped to $distance by downed riders";
        last;
      }
    }
  }
  my $nrow=sprintf('%02d',$row+$distance);
  if ($nrow > $maxr) {
    $nrow=$maxr;
    push @log,'constrained to end of track';
  }
  my $nloc=$sqexist{$nrow.'z'};
  while (exists $riderloc{$sqq[$nloc]}) {
    $nloc--;
  }
  my $ns=$sqq[$nloc];
  my ($nr,$nl)=loc2rowlane($ns);
  if ($nr < $nrow || $brake==1) {
    push @log,"kept back by full road";
    if (exists $features[$nr]{wet}) {
      $pr->{down}=1;
      push @log,"downed in the wet";
    }
  }
  $pr->{location}=$ns;
  print join(', ',@log),"\n";
  delete $pr->{play};
  $riderloc{$ns}=$riderloc{$loc};
  delete $riderloc{$loc};
}

# combativity
{
  my $finishedalready=0;
 FAOUTER:
  foreach my $pl (keys %{$y->{players}}) {
    foreach my $ri (@{$y->{players}{$pl}{riders}}) {
      unless (exists $ri->{location}) {
        $finishedalready++;
        last FAOUTER;
      }
    }
  }
  if ($finishedalready==0) {
    my @log;
    my $fr;
    foreach my $k (reverse sort keys %riderloc) {
      my ($a,$b)=loc2rowlane($k);
      if ($a >= $finishline) {
        last;
      }
      if (!defined $fr || $a == $fr) {
        $fr=$a;
        my $pp=$y->{players}{$riderloc{$k}{player}};
        my $pr=$pp->{riders}[$riderloc{$k}{index}];
        push @log,"$pp->{colourname} $pr->{type}";
        $pr->{combativity}++;
      } else {
        last;
      }
    }
    if (@log) {
      print 'Combativity for ',join(', ',@log),"\n";
    }
  }
}

my @intermediate=(dclone($y));

# slipstreaming
{
  my $anyss=0;
  while (1) {
    my %downness;
    my $ssm=0;
    my %or;
    foreach my $k (keys %riderloc) {
      my ($row,$lane)=loc2rowlane($k);
      push @{$or{$row}},$k;
      my $pp=$y->{players}{$riderloc{$k}{player}};
      my $pr=$pp->{riders}[$riderloc{$k}{index}];
      if (exists $pr->{down}) {
        $downness{$row}=1;
      }
    }
    foreach my $r (sort {$a <=> $b} keys %or) {
      my @r=map {sprintf('%02d',$_)} ($r..$r+2);
      my $ss=0;
      if (exists $or{sprintf('%02d',$r[2])} &&
            !exists $or{sprintf('%02d',$r[1])}) {
        $ss=1;
        foreach my $rr (@r) {
          if (exists $features[$rr]{uphill} ||
                exists $features[$rr]{crosswind} ||
                exists $features[$rr]{cobbles} ||
                exists $downness{$rr}) {
            $ss=0;
            last;
          }
        }
        if ($ss) {
          my @movers=reverse sort @{$or{$r}};
          my $n=sprintf('%02d',$r-1);
          while (exists $or{$n}) {
            if (exists $features[$n]{uphill} ||
                  exists $features[$n]{crosswind} ||
                  exists $features[$n]{cobbles} ||
                  exists $downness{$n}) {
              last;
            } else {
              push @movers,reverse sort @{$or{$n}};
              $n=sprintf('%02d',$n-1);
            }
          }
          my @pack;
          foreach my $m (@movers) {
            my $mt;
            my ($row,$lane)=loc2rowlane($m);
            my $pp=$y->{players}{$riderloc{$m}{player}};
            my $pr=$pp->{riders}[$riderloc{$m}{index}];
            push @pack,"$pp->{colourname} ".uc(substr($pr->{type},0,1));
            my $trow=sprintf('%02d',$row+1);
            my $mi=$sqexist{$trow.'z'};
            while (exists $riderloc{$sqq[$mi]} && $sqq[$mi] ne $m) {
              $mi--;
            }
            $mt=$sqq[$mi];
            $ssm=1;
            $pr->{location}=$mt;
            $riderloc{$mt}=$riderloc{$m};
            delete $riderloc{$m};
            $anyss=1;
          }
          print "Slipstream for ".join(', ',@pack)."\n";
        }
      }
    }
    unless ($ssm) {
      last;
    }
  }
  unless ($anyss) {
    pop @intermediate;
  }
}

# exhaustion
my %or;                         # occupied rows
{
  my @log;
  foreach my $k (keys %riderloc) {
    my ($a,$b)=loc2rowlane($k);
    push @{$or{$a}},$k;
  }
  foreach my $r (sort {$a <=> $b} keys %or) {
    my $n=sprintf('%02d',$r+1);
    my $ss=0;
    if (!exists $or{$n} && $r < $finishline) {
      foreach my $m (@{$or{$r}}) {
        my $pp=$y->{players}{$riderloc{$m}{player}};
        my $pr=$pp->{riders}[$riderloc{$m}{index}];
        if (exists $pp->{bottype}) {
          push @log,"[$pp->{colourname} $pr->{type}]";
        } else {
          push @log,"$pp->{colourname} $pr->{type}";
          push @{$pr->{discard}},'X';
        }
      }
    }
  }
  if (@log) {
    print "Exhaustion for ".join(', ',sort @log)."\n";
  }
}

# mountain points
if (exists $y->{mountains}) {
  my @log;
  foreach my $k (reverse sort keys %riderloc) {
    my ($nr,$nl)=loc2rowlane($k);
    my $pp=$y->{players}{$riderloc{$k}{player}};
    my $pr=$pp->{riders}[$riderloc{$k}{index}];
    my ($or,$ol)=loc2rowlane($pr->{oldlocation});
    foreach my $trigger (sort keys %{$y->{mountains}}) {
      if ($nr >= $trigger && $or < $trigger) {
        my $pt=shift @{$y->{mountains}{$trigger}};
        push @log,"$pp->{colourname} $pr->{type} gains $pt mountain point".plural($pt);
        $pr->{score}{mountain}+=$pt;
        if (scalar @{$y->{mountains}{$trigger}}==0) {
          delete $y->{mountains}{$trigger};
        }
      }
    }
  }
  print map {"$_\n"} @log;
}

push @intermediate,(dclone($y));

# crossed the finish line
{
  my $anyfi=0;
  my @log;
  my $finishedalready=0;
  foreach my $pl (keys %{$y->{players}}) {
    foreach my $ri (@{$y->{players}{$pl}{riders}}) {
      unless (exists $ri->{location}) {
        $finishedalready++;
      }
    }
  }
  my @points=(3,2,1);
  if ($finishedalready < 3) {
    splice @points,0,$finishedalready;
  } else {
    @points=();
  }
  my $stillracing=0;
  foreach my $k (reverse sort keys %riderloc) {
    my ($nr,$nl)=loc2rowlane($k);
    my $pp=$y->{players}{$riderloc{$k}{player}};
    my $pr=$pp->{riders}[$riderloc{$k}{index}];
    $pr->{time}+=60;
    if ($nr >= $finishline) {
      $anyfi=1;
      my $nx=$nr;               # virtual row for slipstream pack
      if (!exists $features[$nx]{uphill}) {
        while (exists $or{$nx+1} && !exists $features[$nx+1]{uphill}) {
          $nx++;
        }
      }
      my $tr=1+$nx-$finishline; # 10-second bonus per space over the line
      my $tb=10*$tr;
      my $pt=shift @points || 0;
      # 10 second time bonus for first two finishers
      if ($pt>1) {
        $tb+=10;
      }
      push @log,"$pp->{colourname} $pr->{type} finishes for $pt point".plural($pt)." and 0:$tb time bonus";
      $pr->{time}-=$tb;
      push @{$pr->{score}{place}},$pt;
      delete $pr->{location};
    } else {
      $stillracing++;
    }
  }
  print map {"$_\n"} @log;
  print "Still racing: $stillracing\n";
  unless ($anyfi) {
    pop @intermediate;
  }
}

# clear up
foreach my $k (reverse sort keys %riderloc) {
  my ($nr,$nl)=loc2rowlane($k);
  my $pp=$y->{players}{$riderloc{$k}{player}};
  my $pr=$pp->{riders}[$riderloc{$k}{index}];
  delete $pr->{oldlocation};
}

while (@intermediate) {
  $yf=newname($yf);
  DumpFile($yf,shift @intermediate);
}

DumpFile(newname($yf,1),$y);

sub newname {
  my $oldname=shift;
  my $offset=shift || 0;
  my @p=reverse split /\./,$oldname;
  my $t;
  foreach my $i (0..$#p) {
    if ($p[$i] =~ /^[0-9]+$/) {
      if ($offset) {
        $offset--;
      } else {
        $t=$i;
        last;
      }
    }
  }
  if (defined $t) {
    $p[$t]=sprintf('%0'.length($p[$t]).'d',$p[$t]+1);
    map {if ($p[$_] =~ /^[0-9]+$/) {$p[$_]=sprintf('%0'.length($p[$_]).'d',0)}} (0..$t-1);
  } else {
    splice @p,1,0,'new';
  }
  return join('.',reverse @p);
}

sub loc2rowlane {
  my $loc=shift;
  $loc =~ /^([0-9]+)([a-z])$/ or die "bad location $loc\n";
  return ($1,$2);
}

sub plural {
  my $n=shift;
  return ($n==1)?'':'s';
}

#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw(LoadFile);
use List::MoreUtils qw(minmax);
use List::Util qw(sum);

my $y;

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
if (-e $yf) {
  $y=LoadFile($yf) or die "no $yf";
} else {
  $y={course => $yf};
  $yf='naimless';
}
my $ti=LoadFile('../tiles.yaml') or die "no tiles";

my @cinfo;
{
  my @course=split '',$y->{course};
  while (my $f=shift @course) {
    if (!exists $ti->{$f}) {
      $f.=shift @course;
      if (!exists $ti->{$f}) {
        die "no tile $f\n";
      }
    }
    push @cinfo,{tile => $f};
    if (exists $y->{weather}{$f}) {
      $cinfo[-1]{weather}=$y->{weather}{$f};
    }
  }
}

my @report;
my %ff;
my %features;

# plot individual spaces
my $space=0;
my %xy;
foreach my $tx (0..$#cinfo) {
  my $t=$cinfo[$tx];
  my $tinfo=$ti->{$t->{tile}};
  if (exists $tinfo->{features}) {
    foreach my $f (@{$tinfo->{features}}) {
      my $k=(keys %{$f})[0];
      my @r;
      if ($f->{$k} =~ /([0-9]+)-([0-9]+)/) {
        @r=($1,$2);
      } else {
        @r=($f->{$k},$f->{$k});
      }
      unless ($k =~ /^([0-9]+)lane/) {
        $ff{$k}+=$r[1]-$r[0]+1;
        foreach my $i ($r[0]..$r[1]) {
          $features{$space+$i-1}{$k}=1;
        }
      }
    }
  }
  $space+=$tinfo->{length};
}

$space-=$ff{finish}+$ff{start};
push @report,"Length: $space";

map {delete $ff{$_}} qw(breakaway start finish);
foreach my $sp (qw(uphill downhill supply cobbles)) {
  if (exists $ff{$sp}) {
    push @report,ucfirst($sp).": $ff{$sp} (".int(100*$ff{$sp}/$space+0.5).'%)';
  }
}

foreach my $sp (sort {$a <=> $b} keys %features) {
  foreach my $m (['downhill', 5],['supply', 4]) {
    if (exists $features{$sp}{$m->[0]}) {
      my $sq=$sp+$m->[1];
      if (exists $features{$sq}) {
        foreach my $n (qw(downhill supply)) {
          if (exists $features{$sq}{$n}) {
            if ($n eq $m->[0]) {
              foreach my $sr ($sp+1..$sq-1) {
                if (!exists $features{$sr}{$n}) {
                  push @report,"Warning: jump from $sp $m->[0] to $sq $n";
                  last;
                }
              }
            } else {
              push @report,"Warning: jump from $sp $m->[0] to $sq $n";
            }
          }
        }
      }
    }
  }
}

print map{"$_\n"} @report;

#! /usr/bin/perl

use strict;
use warnings;

use YAML::XS qw(LoadFile DumpFile);
use Getopt::Std;

my %o;
getopts('ht:r:s:p:g:x:',\%o);

unless (defined $o{t}) {
  warn "Need all parameters - see -h.\n";
  $o{h}=1;
}
if ($o{h}) {
  print STDERR <<EOF;
Usage: $0 -t NAME -[rspgx] CARD (-[rspg] CARD) YAMLFILE
-x may be used if only one rider has a hand
EOF
  exit 0;
}

my $yf=$ARGV[0] || '';
if ($yf eq '') {
  opendir D,'.';
  my @yf=sort grep /\.ya?ml$/,readdir D;
  closedir D;
  $yf=$yf[-1];
}
my $y={};
if (-e $yf) {
  $y=LoadFile($yf) or die "no $yf";
}

my @riders=qw(rouleur sprinteur grimpeur puncheur);
my %r=map {substr($_,0,1) => $_} @riders;

if (!exists $y->{players}{$o{t}}) {
  die "Player $o{t} is not in the file.\n";
}

if (defined $o{x}) {
  my @rr;
  foreach my $rider (@{$y->{players}{$o{t}}{riders}}) {
    if (exists $rider->{hand} && scalar @{$rider->{hand}}>0) {
      push @rr,$rider->{type};
    }
  }
  if (scalar @rr == 1) {
    $o{substr($rr[0],0,1)}=$o{x};
  } else {
    die "wrong number of qualifying riders\n";
  }
}

my $a=0;
foreach my $rider (@{$y->{players}{$o{t}}{riders}}) {
  my $rd=substr($rider->{type},0,1);
  if (defined $rider->{location}) {
    if (defined $r{$rd} && defined $o{$rd}) {
      $o{$rd}=uc($o{$rd});
      my %h;
      map {$h{$_}++} @{$rider->{hand}};
      if (exists $h{$o{$rd}}) {
        $h{$o{$rd}}--;
        unless (exists $rider->{play}) {
          $rider->{play}=[];
        }
        push @{$rider->{play}},$o{$rd};
        push @{$rider->{discard}},map {($_) x $h{$_}} sort keys %h;
        delete $rider->{hand};
        $a=1;
      } else {
        die "$rider->{type} has no $o{$rd} in hand:\n".
          join(' ',sort @{$rider->{hand}})."\n";
      }
    } else {
      my $w=1;
      if (exists $rider->{hand}) {
        my %c=map {$_ => 1} @{$rider->{hand}};
        delete $c{2};
        delete $c{X};
        unless (keys %c) {
          $w=0;
        }
      }
      if ($w) {
        warn "$rider->{type} has no play noted - OK if breakaway\n";
      }
    }
  } else {
    if ($o{$rd}) {
      die "$rider->{type} isn't in play.\n";
    }
  }
}

if ($a) {
  DumpFile(newname($yf),$y);
} else {
  warn "did nothing\n";
}

sub newname {
  my $oldname=shift;
  my $offset=shift || 0;
  my @p=reverse split /\./,$oldname;
  my $t;
  foreach my $i (0..$#p) {
    if ($p[$i] =~ /^[0-9]+$/) {
      if ($offset) {
        $offset--;
      } else {
        $t=$i;
        last;
      }
    }
  }
  if (defined $t) {
    $p[$t]=sprintf('%0'.length($p[$t]).'d',$p[$t]+1);
  } else {
    splice @p,1,0,'new';
  }
  return join('.',reverse @p);
}
